# -*- coding: utf-8 -*-
"""ingredients_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mLOioXkbXIVri-8FjTztj2S2JzaHetdl

## 데이터셋 다운로드
"""

# Commented out IPython magic to ensure Python compatibility.
# YOLO v5 PyTorch 다운로드
!git clone https://github.com/ultralytics/yolov5
# %cd /content/yolov5
# %pip install -qr requirements.txt

# 이미지 데이터 다운로드
!git clone https://github.com/Ottug-i/Curry_Data

# Commented out IPython magic to ensure Python compatibility.
# train, valid 경로 정보 및 레이블 (클래스) 확인
# %cat /content/yolov5/Curry_Data/object_detection/data.yaml

# 파일의 문장을 텍스트처럼 이용하기 위해 함수 생성
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# # 폴더에 맞게 경로 변경
# %%writetemplate /content/yolov5/Curry_Data/object_detection/data.yaml
# 
# train: ./Curry_Data/object_detection/train/images
# test: ./Curry_Data/object_detection/test/images
# val: ./Curry_Data/object_detection/valid/images
# 
# nc: 111
# names: ['참치캔', '라면', '카레', '소주', '맥주', '닭', '닭가슴살', '소고기', '돼지', '오리고기', '삼겹살', '사과', '바나나', '레몬', '오렌지', '크랜베리', '복숭아', '포도', '망고', '토마토', '딸기', '체리', '수박', '석류', '양배추', '고추', '파프리카', '당근', '옥수수', '오이', '마늘', '생강', '상추', '양파', '감자', '무', '시금치', '고구마', '샐러리', '브로콜리', '애호박', '단호박', '대파', '김치', '연근', '파슬리', '콩나물', '아보카도', '새송이버섯', '느타리버섯', '배추', '팽이버섯', '표고버섯', '양송이버섯', '목이버섯', '청경채', '고사리', '굴', '연어', '문어', '가리비', '해삼', '새우', '홍합', '갈치', '다시마', '꼬막', '고등어', '게', '전복', '참치', '오징어', '맛살', '초고추장', '땅콩잼', '누텔라', '식용유', '식초', '후추', '달걀', '삶은달걀', '소시지', '베이컨', '버터', '치즈', '우유', '만두', '두부', '쌀밥', '파스타면', '국수', '밤', '아몬드', '호두', '식빵', '바게트', '크로와상', '와플', '고추장', '빵', '마요네즈', '김', '멸치', '생강', '베이컨', '박력분', '양배추', '깻잎', '머스터드', '된장', '부추']

# Commented out IPython magic to ensure Python compatibility.
# %cat /content/yolov5/Curry_Data/object_detection/data.yaml

"""## 모델 구성"""

# Commented out IPython magic to ensure Python compatibility.
import yaml

# 데이터에서 클래스 수 가져오기
with open('/content/yolov5/Curry_Data/object_detection/data.yaml', 'r') as stream:
    num_classes = str(yaml.safe_load(stream)['nc'])

# 80개의 클래스
# %cat /content/yolov5/models/yolov5s.yaml

# Commented out IPython magic to ensure Python compatibility.
# # 클래스 수(80 -> 111)를 늘려서 새롭게 모델 정의
# %%writetemplate /content/yolov5/models/custom_yolov5s.yaml
# 
# # Parameters
# nc: {num_classes}  # number of classes
# depth_multiple: 0.33  # model depth multiple
# width_multiple: 0.50  # layer channel multiple
# anchors:
#   - [10,13, 16,30, 33,23]  # P3/8
#   - [30,61, 62,45, 59,119]  # P4/16
#   - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 v6.0 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, C3, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 6, C3, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, C3, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 3, C3, [1024]],
#    [-1, 1, SPPF, [1024, 5]],  # 9
#   ]
# 
# # YOLOv5 v6.0 head
# head:
#   [[-1, 1, Conv, [512, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#    [-1, 3, C3, [512, False]],  # 13
# 
#    [-1, 1, Conv, [256, 1, 1]],
#    [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#    [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#    [-1, 3, C3, [256, False]],  # 17 (P3/8-small)
# 
#    [-1, 1, Conv, [256, 3, 2]],
#    [[-1, 14], 1, Concat, [1]],  # cat head P4
#    [-1, 3, C3, [512, False]],  # 20 (P4/16-medium)
# 
#    [-1, 1, Conv, [512, 3, 2]],
#    [[-1, 10], 1, Concat, [1]],  # cat head P5
#    [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)
# 
#    [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#   ]
#

# Commented out IPython magic to ensure Python compatibility.
# nc가 111이 됨
# %cat /content/yolov5/models/custom_yolov5s.yaml

"""## 학습"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/yolov5

# 학습
!python train.py --img 640 --batch 16 --epochs 3 --data /content/yolov5/Curry_Data/object_detection/data.yaml --cfg ./models/custom_yolov5s.yaml --weight '' --name ingredients_results --cache

"""## 검증"""

# 학습 수행이 된 결과 중 가장 수치가 좋았던 가중치 파일 모델을 이용해 검증 수행 (검증 데이터에 대해 수행)
!python val.py --weights runs/train/ingredients_results2/weights/best.pt --data /content/yolov5/Curry_Data/object_detection/data.yaml --img 640 --iou 0.65 --half

# 학습 수행이 된 결과 중 가장 수치가 좋았던 가중치 파일 모델을 이용해 테스트 수행 (테스트 데이터에 대해 수행)
!python val.py --weights runs/train/ingredients_results2/weights/best.pt --data /content/yolov5/Curry_Data/object_detection/data.yaml --img 640 --task test

"""## 추론"""

# Commented out IPython magic to ensure Python compatibility.
# %ls runs/train/ingredients_results2/weights

# 테스트 이미지에 대해서 가장 수치가 좋았던 가중치 모델로 추론
!python detect.py --weights runs/train/ingredients_results2/weights/best.pt --img 640 --conf 0.4 --source ./Curry_Data/object_detection/test/images

# 랜덤으로 추론 확인 (실행마다 랜덤으로 추론하는 이미지가 달라짐)
import glob
import random
from IPython.display import Image, display

image_name = random.choice(glob.glob('/content/yolov5/runs/detect/exp/potato-44-_jpg.rf.5fd9933f387d430144e4bb988616f0c3.jpg'))
display(Image(filename=image_name))

"""## 모델 내보내기"""

# 가장 수치가 좋았던 가중치 파일 구글 드라이브로 내보내기
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cp /content/yolov5/runs/train/ingredients_results2/weights/best.pt /content/drive/My\ Drive/ingredients

# tflite로 변환하기 (실행 안됨)
!python models/tf.py --weights runs/train/ingredients_results2/weights/best.pt --cfg models/custom_yolov5s.yaml --img 640